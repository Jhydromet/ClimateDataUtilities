library(tidyverse)
library(plotly)
library(lubridate)
library(here)

#Graded data dir

gradeddir <- here::here("processing","2_graded")
gradedfile <- dir(path = gradeddir, full.names = T)

# Offset data directory

offsetdir <- here::here("processing", "3_offset")

# Which site & Project are you working on?
SiteID <-  "E3H"
projectcode <- "20Y0150"

# What is the timestep of the logger?
timestep <- "15 min"

# -------------------------------------------------------------------
# Read in data and organize for analysis ----------------------------------
# -------------------------------------------------------------------

# Read in the data, fix column names

data <-  read_csv(gradedfile)

# Quick plot if you want

data %>% 
  filter(parameter == "WaterLevel_m") %>% 
  ggplot() +
  geom_line(aes(DateTime, value_corrected))


# Split temperature and level data -------------------------------------------------------

tempC.data <- filter(data, parameter == "WaterTemp_C")

levelm.data <- filter(data, parameter == "WaterLevel_m")

# -------------------------------------------------------------------
# Level Offsetting --------------------------------------------------------
# -------------------------------------------------------------------

# read in offset value .csv. This should be in the 3_offset folder
offsetfile <- dir(offsetdir, "Survey_Offsets", full.names = T)

# read in the file, create interval objects for offset intervals
offsetdata <- read_csv(offsetfile) %>% 
  slice(-1) %>% 
  mutate(DateTime = ymd_hm(DateTime),
         staff_gauge_reading_m = as.double(staff_gauge_reading_m),
         offset_forwards_m = as.double(offset_forwards_m)) 

surveyoffsets <- offsetdata %>% 
  drop_na(offset_type) %>% 
  mutate(offsetinterval = case_when(
           is.na(lead(DateTime, n=1)) ~ interval(DateTime, tail(levelm.data$DateTime, n=1)),
           TRUE ~ interval(DateTime, lead(DateTime, n=1)))) %>% 
  select(offset_type, DateTime, offsetinterval, offset_forwards_m, staff_gauge_reading_m)


# Calculate cumulative offset over different offset intervals.

dateseq <- tibble(DateTime = levelm.data$DateTime)

offset.values <- full_join(dateseq, surveyoffsets) %>% 
  arrange(DateTime) %>% 
  fill(!DateTime) %>% 
  group_by(offsetinterval) %>% 
  mutate(incremental_offset = offset_forwards_m/(as.numeric(offsetinterval)/as.numeric(as.duration(timestep))), 
         offset_apply = case_when(
           offset_type == "rampup" ~ cumsum(incremental_offset),
           offset_type == "rampdown"   ~ offset_forwards_m - cumsum(incremental_offset),
           offset_type == "constant" ~ offset_forwards_m)) %>% 
  ungroup() %>% 
  select(DateTime, offset_type, offset_forwards_m, offset_apply)

# apply offsets to the level data. "inc" and "const" refer to incremental or constant offset

offset_levelm_data <- full_join(levelm.data, offset.values) %>% 
  mutate(value_offset = value_corrected + offset_apply)  

# re add in the manual staff gauge readings %>% 

offset_levelm_data <- full_join(offset_levelm_data, select(offsetdata, c(DateTime, staff_gauge_reading_m)))

# plot to check

p <- offset_levelm_data %>% 
  #filter(DateTime >= ymd_hm("2020-06-01 00:00")) %>% 
  ggplot(aes(x = DateTime))+
  #geom_point(aes(y = staff_gauge_reading_m))+
  geom_line(aes(y = value_corrected), linetype = "dashed")+
  geom_line(aes(y = value_offset), alpha = .5, colour = "blue")


p
ggplotly(p)



# Rejoin the temperature data, fix the grades -----------------------------

offset_levelm_data <- offset_levelm_data %>% 
  mutate(grade = case_when(
    offset_type == "inc" ~ grade - 1,
    TRUE ~ grade)) %>% 
  mutate(value_corrected = value_offset) %>% 
  select(!contains("offset"), !staff_gauge_reading_m)

corrected.data <- full_join(offset_levelm_data, tempC.data)%>% 
  drop_na(parameter)

# final pretty plot -------------------------------------------------------

plotname <- paste(Sys.Date(),
                  SiteID,
                  "Offset",
                  sep = "_")

corrected.data %>% 
  ggplot(aes(x = DateTime)) +
  #geom_line(aes(y = value_raw), alpha = 0.5, colour = "blue") +
  geom_line(aes(y = value_corrected)) +
  labs(title = plotname) +
  facet_grid(vars(parameter), scales = "free")

ggsave(p, filename = paste(offsetdir, paste0(plotname, ".png"), sep ="/"), device = "png")

# Final Data Export -------------------------------------------------------

# apply the grade labeller to the data again

final.data <- corrected.data %>% 
  mutate(
    ProjectID = projectcode,
    StationID = SiteID,
    value_raw = na_if(value_raw, "NaN"),
    value_corrected = case_when(
      grade >= 11 ~ as.character(value_corrected), # set corrected value to NA if not passing QAQC
      TRUE ~ "NA"),
    grade_label = case_when(
      grade == -2	~ "Unusable data",
      grade == -1	~ "Unspecified",
      grade == 0	~ "Undefined",
      grade == 1	~ "Unverified data",
      grade == 2 ~	"Dry conditions affect record",
      grade == 3 ~	"Ice conditions affect record",
      grade == 4 ~	"Incomplete or partial aggregated record",
      grade == 5 ~	"Estimated data with No confidence",
      grade == 10 ~	"Estimated data with Poor confidence",
      grade == 11	~ "Poor data",
      grade == 20 ~	"Estimated data with Fair confidence",
      grade == 21	~ "Fair data",
      grade == 30 ~	"Estimated data with Good confidence",
      grade == 31 ~	"Good data",
      grade == 40 ~	"Estimated data with Very Good confidence",
      grade == 41 ~	"Very Good data",
      grade == 50 ~	"Estimated data with Excellent confidence",
      grade == 51 ~	"Excellent data"),
    approval_label = case_when(
      approval == 0	~ "Undefined",
      approval == 1	~ "Working",
      approval == 2	~ "In Review",
      approval == 3	~ "Approved")) %>% 
  select(ProjectID,	StationID,	DateTime,	parameter,	
         value_raw,	value_corrected,	grade,	grade_label,	approval,	approval_label)


export <- final.data %>% 
  mutate(across(.cols = everything(), as.character)) 

#!!!# Where is this being exported?


write_csv(export, paste(offsetdir, paste0(plotname, ".csv"), sep ="/"))

